#!/usr/bin/env node
/*
 Update the community logos in src/img/communities/ 
 The logos must exist in orig with the name used by getSerializedCommunityName
 If the logo file exists in dest, it will not be overwritten
 NOTE: Install imagemagick package if you doesn't have it.
 To execute: 
 npm install -g node-inspector
 node-debug bin/update-communities-new
*/

"use strict";

// maximum height of the logo, in pixels
var LOGO_MAX_HEIGHT = 120;
var LOGO_MAX_WIDTH = 240;

var DOCUMENT_KEY = "1XE8mTLgaVhueXBwZtqMEdOCG4auW9B7DUWUA9x3Spu8";
var NAME_COL = "1";
var URL_COL = "19";

const imageExtensions = ["svg", "png", "jpg", "jpeg"];

const GoogleSpreadsheets = require("google-spreadsheets");
const fs = require("fs");
const _ = require("lodash");
const exec = require("child_process");
const imageDownloader = require("./image-downloader");

function getSerializedCommunityName(communityName) {
  return communityName.replace(/[^a-zA-Z0-9_\-]/g, "-");
}

function getValue(o) {
  return (o && o.value) || "";
}

function echoExec(command) {
  // executes and logs the command
  console.log(command);
  return new Promise((resolve, reject) => {
    exec.exec(command, undefined, resolve);
  });
}

function getLogoPath(serializedCommunityName) {
  let path;
  imageExtensions.forEach(extension => {
    const pathWithExtension = `static/img/communities/orig/${serializedCommunityName}.${extension}`;
    if (!path && fs.existsSync(pathWithExtension)) {
      path = pathWithExtension;
    }
  });
  return path;
}

// crea el fichero con los estilos CSS
function createScss(communities) {
  let content = _.map(communities, function({ logo, className }) {
    const extension = imageDownloader.getFileExtension(logo);
    return logo
      ? `.${className} { background-image: url(/img/communities/${className}${extension}); }`
      : "";
  }).join("\n");
  console.log("Writing CSS selectors at src/scss/pages/communities.scss");
  fs.writeFile(
    "src/scss/pages/communities.scss",
    "// File generated by bin/update-communities\n" + content
  );
}

// crea el fichero de footer con los enlaces
function createFooter(communities) {
  var content =
    "<!-- File generated by bin/update-communities -->\n" +
    _.map(
      communities,
      ({ url, className, name }) =>
        `<a href="${url}" target="_blank" class="community ${className}" title="${name}" rel="noopener noreferrer">${name}</a> `
    ).join("\n");

  console.log(
    "Writing the community links at layouts/partials/communities_logos.html"
  );
  fs.writeFile("layouts/partials/communities_logos.html", content);
}

GoogleSpreadsheets(
  {
    key: DOCUMENT_KEY
  },
  function(err, spreadsheet) {
    spreadsheet.worksheets[0].cells(
      {
        range: "R3C1:R500C20"
      },
      function(err, cells) {
        // transformar la hoja Excel en comunidades
        var communities = _.map(cells.cells, function(row) {
          var communityName = getValue(row[NAME_COL]);
          var serializedCommunityName = getSerializedCommunityName(
            communityName
          );
          return {
            // replaces all the characters that can give problems in a Scss file
            className: serializedCommunityName,
            name: communityName,
            url: getValue(row[URL_COL]),
            logo: getLogoPath(serializedCommunityName)
          };
        });

        // descargar las imÃ¡genes y procesar las que se hayan podido descargar
        var processedCommunities = [];
        var iconsRefactor = _.map(communities, function(community) {
          console.log("Processing community " + community.name);
          if (!community.url || community.url.replace(/ /, "") == "N/A") {
            console.log("Error: Url is empty: ", community.name);
            return Promise.resolve();
          }
          if (!community.logo || community.logo.replace(/ /, "") == "N/A") {
            console.log("Error: Logo does not exist: " + community.name);
            return Promise.resolve();
          }

          const originalFilename = community.logo;
          return Promise.resolve(
            imageDownloader.getFileExtension(originalFilename)
          )
            .then(extension => {
              const processedFilename = `static/img/communities/${
                community.className
              }${extension}`;
              const toPng = `convert "${originalFilename}" -geometry ${LOGO_MAX_WIDTH}x${LOGO_MAX_HEIGHT} "${processedFilename}"`;
              const transformFunction = imageDownloader.isVectorImage(extension)
                ? `cp "${originalFilename}" "${processedFilename}"`
                : toPng;
              return echoExec(transformFunction).then(
                (error, stdout, stderr) => {
                  if (error) {
                    console.log("stdout: " + stdout);
                    console.log("stderr: " + stderr);
                    console.log("Error: " + error);
                    throw new Error("Error:", error);
                  }
                  return originalFilename;
                }
              );
            })
            .then(function() {
              console.log("Proccessed " + community.name);
              processedCommunities.push(community);
            })
            .catch(function(msg, error) {
              console.log(msg, error);
            });
        });

        Promise.all(iconsRefactor).then(function() {
          // create the scss file with background images
          createScss(processedCommunities);

          // create the footer file with all communities
          createFooter(processedCommunities);
        });
      }
    );
  }
);
