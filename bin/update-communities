#!/usr/bin/env node
/*
 Update the community logos in src/img/communities/ (orig and gray)
 If the logo file exists in orig, it will not be overwritten
 NOTE: Install imagemagick package if you doesn't have it.
 To execute: 
 npm install -g node-inspector
 node-debug bin/update-communities
*/

/*
TODO
If conversion to gray fails, on re-run, must take origin and convert to grey.
*/

'use strict';

// maximum height of the logo, in pixels
var LOGO_MAX_HEIGHT = 120
var LOGO_MAX_WIDTH = 240

var DOCUMENT_KEY = '1XE8mTLgaVhueXBwZtqMEdOCG4auW9B7DUWUA9x3Spu8';
var NAME_COL = '1';
var LOGO_COL = '15';
var URL_COL = '16';

const GoogleSpreadsheets = require("google-spreadsheets");
const fs = require('fs');
const _ = require("lodash");
const imageDownloader = require('./image-downloader');

function getValue(o) { 
  return o && o.value || ''
}

// crea el fichero con los estilos CSS 
function createScss(communities) {
  var content = '// File generated by bin/update-communities\n' +
  _.map(communities, function({logo, className}) {
    const extension = imageDownloader.getFileExtension(logo);
    return logo? `.${className} { background-image: url(/img/communities/${className}${imageDownloader.isVectorImage(extension)? extension : '.png'}); }` : ''
  }).join('\n')

  console.log("Writing CSS selectors at src/scss/communities.scss")
  fs.writeFile('src/scss/communities.scss', content)
}

// crea el fichero de footer con los enlaces
function createFooter(communities) {
  var content = '<!-- File generated by bin/update-communities -->\n' +
    _.map(communities, ({url, className, name}) => `<a href="${url}" target="_blank" class="community ${className}" title="${name}">${name}</a> `).join('\n');

    console.log("Writing the community links at layouts/partials/communities_logos.html")
    fs.writeFile('layouts/partials/communities_logos.html', content)
}

GoogleSpreadsheets({
    key: DOCUMENT_KEY
}, function(err, spreadsheet) {

  spreadsheet.worksheets[0].cells({
      range: "R3C1:R500C20"
  }, function(err, cells) {
    
    // transformar la hoja Excel en comunidades
    var communities = _.map(cells.cells, function(row) {
      var communityName = getValue(row[NAME_COL])
      return {
        // replaces all the characters that can give problems in a Scss file
        className: communityName.replace(/[^a-zA-Z0-9_\-]/g, '-'),
        name: communityName,
        url: getValue(row[URL_COL]),
        logo: getValue(row[LOGO_COL]).replace('https://', 'http://')
      }
    })

    // descargar las imÃ¡genes y procesar las que se hayan podido descargar
    var processedCommunities = [];
    var downloads = _.map(communities, function(community) {
      console.log('Processing community ' + community.name);
      const url = community.logo;
      return Promise.resolve(imageDownloader.getFileExtension(url)).then((extension) => {
        const processedFilename = `static/img/communities/${community.className}${imageDownloader.isVectorImage(extension)? extension : '.png'}`;
        const originalFilename = `static/img/communities/orig/${community.className}${extension}`;
        return imageDownloader.download({
          file: {
            url,
            name: community.name,
          },
          originalFilename,
          processedFilename,
          toPng: `convert "${originalFilename}" -geometry ${LOGO_MAX_WIDTH}x${LOGO_MAX_HEIGHT} "${processedFilename}"`
        })
      }).then(function() {
        console.log('Proccessed ' + community.name);
        processedCommunities.push(community);
      }).catch(function(msg, error) {
        console.log(msg, error);
      });
    });

    Promise.all(downloads).then(function() {
      // create the scss file with background images
      createScss(processedCommunities);

      // create the footer file with all communities
      createFooter(processedCommunities);
    })
    
  });
});